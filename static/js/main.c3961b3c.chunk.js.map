{"version":3,"sources":["navbar.js","convert.js","stack.js","type.js","serviceWorker.js","index.js"],"names":["Navbar","scrollType","React","useState","open","setOpen","scroll","setScroll","handleClose","descriptionElementRef","useRef","useEffect","descriptionElement","current","focus","className","href","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","dividers","DialogContentText","component","ref","tabIndex","type","DialogActions","Button","window","color","startIcon","src","width","stack","data","infixPostCon","exp","rows","i","res","spaceExp","split","length","c","isNaN","test","push","pop","symbol","str","join","opstack","console","log","ConvertTable","props","operation","map","d","index","key","op1","op2","evaluate","popInPost","popInPre","compute","parseInt","opr1","opr2","value","Opstack","undefined","answer","operand1","operand2","operator","parseFloat","PostFixEvalTable","operationType","label","evaluationTypes","convertTypes","Type","select2","info","selectedType","setSelectedType","setExp","tbody","setTBody","btnRef","CheckType","Info","text","handleClick","document","getElementById","style","display","reverse","prefixEval","innerHTML","revInfix","newRevInfix","postfix","trim","infixPreCon","htmlFor","name","onChange","e","target","o","size","placeholder","onKeyPress","keyCode","which","click","height","selectedValue","setSelectedValue","margin","fontFamily","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","App","Component","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+RAQe,SAASA,IAAU,IAIPC,EAJM,EACPC,IAAMC,UAAS,GADR,mBACxBC,EADwB,KAClBC,EADkB,OAEHH,IAAMC,SAAS,SAFZ,mBAExBG,EAFwB,KAEhBC,EAFgB,KASzBC,EAAc,WAClBH,GAAQ,IAGJI,EAAwBP,IAAMQ,OAAO,MAU3C,OATAR,IAAMS,WAAU,WACd,GAAIP,EAAM,CAAC,IACQQ,EAAuBH,EAAhCI,QACmB,OAAvBD,GACFA,EAAmBE,WAGtB,CAACV,IAGF,oCACE,yBAAKW,UAAU,WACb,yBAAKA,UAAU,QACb,wCAEF,4BACE,4BACE,uBAAGC,KAAK,IAAIC,SA3BGhB,EA2BsB,QA3BP,WACtCI,GAAQ,GACRE,EAAUN,MAyBF,WAMN,kBAACiB,EAAA,EAAD,CACEd,KAAMA,EACNe,QAASX,EACTF,OAAQA,EACRc,kBAAgB,sBAChBC,mBAAiB,6BACjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,uBAAhB,QACA,kBAACC,EAAA,EAAD,CAAeC,SAAqB,UAAXnB,GACvB,kBAACoB,EAAA,EAAD,CACEC,UAAW,MACXJ,GAAG,4BACHK,IAAKnB,EACLoB,UAAW,GACX,+CALF,0EAOE,6BACA,gDARF,uGAUE,6BACA,iDAXF,8GAaE,6BACA,6BAdF,0FAiBE,6BACA,6BACA,6BACA,wDACA,6BACA,6BACA,4DACA,6BACA,4BACE,4IAIA,gGAGA,uGAIA,oEACA,wBAAIC,KAAK,KACP,yIAIA,4DAEF,4EACA,wBAAIA,KAAK,KACP,+GAIA,0DAEF,oCAEF,6BACA,6BACA,2DACA,6BACA,4BACE,+GAIA,+FAGA,qHAIA,oCAEF,6BACA,6BACA,6BACA,0DACA,6BACA,6BACA,mDACA,4BACE,mGAIA,4FAGA,uHAIA,6DACA,6EACA,oCAEF,6BACA,kDACA,4BACE,uEACA,6EACA,kEACA,sCAIN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEf,QAAS,WACPgB,OAAO7B,KAAK,oCAEd8B,MAAM,UACNC,UACE,yBACEC,IAAI,uDACJC,MAAM,UARZ,UAaA,kBAACL,EAAA,EAAD,CAAQf,QAAST,EAAa0B,MAAM,WAApC,S,YC3KNI,EAAQ,GACRC,EAAO,GAEI,SAASC,EAAaC,GACnCH,EAAQ,GACR,IAAII,EAAO,GACPC,EAAI,EACJC,EAAM,GACNC,EAAWJ,EAAIK,MAAM,KACrBD,EAASE,OAAS,IAAGN,EAAMI,GANS,oBAOxBJ,GAPwB,IAOxC,2BAAqB,CAAC,IAAXO,EAAU,QACnB,IAAKC,MAAMD,IA6FN,WAAWE,KA7FSF,GAAIJ,EAAID,KAAOK,OAEtC,OAAQA,GACN,IAAK,IACHV,EAAMa,KAAKH,GACX,MACF,IAAK,IACL,IAAK,IACH,KAC8B,MAA5BV,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IAErBH,EAAID,KAAOL,EAAMc,MAEnBd,EAAMa,KAAKH,GACX,MACF,IAAK,IACL,IAAK,IACH,KAC8B,MAA5BV,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IAErBH,EAAID,KAAOL,EAAMc,MAEnBd,EAAMa,KAAKH,GACX,MACF,IAAK,IACL,IAAK,IACH,KAC8B,MAA5BV,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IACO,MAA5BT,EAAMA,EAAMS,OAAS,IAErBH,EAAID,KAAOL,EAAMc,MAEnBd,EAAMa,KAAKH,GACX,MACF,IAAK,IACH,KAAmC,MAA5BV,EAAMA,EAAMS,OAAS,IAAYH,EAAID,KAAOL,EAAMc,MACzDd,EAAMc,MAMZV,EAAKS,KAAK,CACRE,OAAQL,EACRM,IAAI,GAAD,OAAKV,EAAIW,KAAK,MACjBC,QAAQ,GAAD,OAAKlB,EAAMiB,KAAK,SA7Da,8BAgExC,KAAwB,IAAjBjB,EAAMS,QACXH,EAAID,KAAOL,EAAMc,MASnB,OAPAV,EAAKS,KAAK,CACRE,OAAQ,GACRC,IAAI,GAAD,OAAKV,EAAIW,KAAK,MACjBC,QAAS,KAEXjB,EAAOG,EACPe,QAAQC,IAAId,GACLA,EAAIW,KAAK,KA8BX,SAASI,EAAaC,GAC3B,OACE,yBAAKrC,GAAG,WAAWR,UAAU,oBAC3B,8BAAO6C,EAAMC,UAAY,qBACzB,2BAAO9C,UAAU,iBACf,+BACE,4BACE,sCACA,4BAAK6C,EAAMN,IAAM,WACjB,gDAEDf,EAAKuB,KAAI,SAACC,EAAGC,GAAJ,OACR,wBAAIC,IAAKD,GACP,sCAAQD,EAAEV,SACV,sCAAQU,EAAET,MACV,sCAAQS,EAAEP,iBC3HxB,IACIU,EAAKC,EAAKvB,EAAKL,EADfD,EAAQ,GAEG,SAAS8B,EAAS3B,EAAKoB,GACpC,IAAInB,EAAO,GACXJ,EAAQ,GACR,IAAIO,EAAWJ,EAAIK,MAAM,KACrBD,EAASE,OAAS,IAAGN,EAAMI,GAJgB,oBAK/BJ,GAL+B,IAK/C,2BAAqB,CAAC,IAAXO,EAAU,QACdC,MAAMD,IAIQ,WAAba,GAAwBQ,IACX,UAAbR,GAAuBS,IAC3B1B,EAAM2B,EAAQL,EAAKC,EAAKnB,GACxBV,EAAMa,KAAKP,IAPEN,EAAMa,KAAKqB,SAASxB,EAAG,KAStCN,EAAKS,KAAK,CACRE,OAAQL,EACRyB,KAAMP,EACNQ,KAAMP,EACNQ,MAAO/B,EACPgC,QAAQ,GAAD,OAAKtC,KAEd4B,OAAMW,EACNV,OAAMU,EACNjC,OAAMiC,GAxBuC,8BA0B/C,IAAIC,EAASxC,EAAMc,MAEnB,OADAb,EAAOG,EACAoC,EAET,SAAST,IACPF,EAAM7B,EAAMc,MACZc,EAAM5B,EAAMc,MAEd,SAASkB,IACPJ,EAAM5B,EAAMc,MACZe,EAAM7B,EAAMc,MAEd,SAASmB,EAAQQ,EAAUC,EAAUC,GACnC,IAAIf,EAAMgB,WAAWH,GACjBZ,EAAMe,WAAWF,GACrB,OAAQC,GACN,IAAK,IACH,OAAOf,EAAMC,EACf,IAAK,IACH,OAAOD,EAAMC,EACf,IAAK,IACH,OAAOD,EAAMC,EACf,IAAK,IACH,OAAOD,EAAMC,EACf,IAAK,IACL,IAAK,IACH,OAAO,KAAP,IAAOD,EAAOC,IAYb,SAASgB,EAAiBvB,GAC/B,OACE,yBAAKrC,GAAG,WAAWR,UAAU,oBAC3B,8BAAO6C,EAAMC,UAAY,qBACzB,2BAAO9C,UAAU,SACf,+BACE,4BACE,sCACA,yCACA,yCACA,qCACA,gDAEDwB,EAAKuB,KAAI,SAACC,EAAGC,GAAJ,OACR,wBAAIC,IAAKD,GACP,sCAAQD,EAAEV,SACV,iCACcwB,IAAXd,EAAEU,MAAuBxB,MAAMc,EAAEU,MAAsB,GAAvD,UAA4CV,EAAEU,OAEjD,iCACcI,IAAXd,EAAEW,MAAuBzB,MAAMc,EAAEW,MAAsB,GAAvD,UAA4CX,EAAEW,OAEjD,iCACeG,IAAZd,EAAEY,OAAwB1B,MAAMc,EAAEY,OAAwB,GAA1D,UAA8CZ,EAAEY,QAEnD,sCAAQZ,EAAEa,iBCxFxB,IAaIf,EAAWuB,EAbTtD,EAAO,CACX,CAAE6C,MAAO,EAAGU,MAAO,WACnB,CAAEV,MAAO,EAAGU,MAAO,aAEfC,EAAkB,CACtB,CAAEX,MAAO,EAAGU,MAAO,WACnB,CAAEV,MAAO,EAAGU,MAAO,WAEfE,EAAe,CACnB,CAAEZ,MAAO,EAAGU,MAAO,oBACnB,CAAEV,MAAO,EAAGU,MAAO,oBAKN,SAASG,IAAO,IAWzBC,EAASC,EAXgB,EAMWvF,mBAAS2B,EAAK,GAAG6C,OAN5B,mBAMtBgB,EANsB,KAMRC,EANQ,OAOPzF,mBAAS,IAPF,mBAOtBsC,EAPsB,KAOjBoD,EAPiB,OAQH1F,mBAAS,+BARN,mBAQtB2F,EARsB,KAQfC,EARe,KASvBC,EAAStF,iBAAO,MAGF,GAAhBiF,GACFF,EAAU,kBAACQ,EAAD,CAAWnE,KAAMyD,IAC3BG,EAAO,kBAACQ,EAAD,CAAMC,KAAK,kCAClBf,EAAgB,WACS,GAAhBO,IACTF,EAAU,kBAACQ,EAAD,CAAWnE,KAAMwD,IAC3BI,EAAO,kBAACQ,EAAD,CAAMC,KAAK,qBAClBf,EAAgB,YAUlB,SAASgB,EAAYhB,EAAe3C,GAClC,IAIMG,EAkBAA,EAtBAkC,EAASuB,SAASC,eAAe,WACrBD,SAASC,eAAe,aAChCC,MAAMC,QAAU,OACJ,aAAlBpB,KAEe,WAAbvB,IACFjB,EAAMwB,EAAS3B,EAAKoB,GACpBkC,EAAS,kBAACZ,EAAD,CAAkB1C,IAAKA,EAAKoB,UAAWA,MAEjC,UAAbA,IACFjB,EDAD,SAAoBH,EAAKoB,GAC9B,IAAIhB,EAAWJ,EAAIK,MAAM,KACzB,OAAMD,EAASE,OAAS,EAGVqB,EAASvB,EAAS4D,UAAUlD,KAAK,KAAMM,GAD5CO,EADM3B,EAAIK,MAAM,IAAI2D,UAAUlD,KAAK,IAClBM,GCJd6C,CAAWjE,EAAKoB,GACtBkC,EACE,kBAACZ,EAAD,CAAkB1C,IAAKA,EAAKoB,UAAWA,EAAY,kBAGvDJ,QAAQC,IAAId,GACZkC,EAAO6B,eACG9B,IAARjC,GAAsBK,MAAML,GAExB,mCAFJ,qBACkBA,EADlB,SAIkB,YAAlBwC,IAEe,oBAAbvB,IACFjB,EAAMJ,EAAaC,GACnBsD,EAAS,kBAACpC,EAAD,CAAcE,UAAWA,EAAWP,IAAI,cAElC,mBAAbO,IACFjB,EFKD,SAAqBH,GAC1B,IAAImE,EACFC,EAAc,GACZhE,EAAWJ,EAAIK,MAAM,KAGlB8D,EAFD/D,EAASE,OAAS,EAENF,EAAS4D,UAAUlD,KAAK,KAD7Bd,EAAIK,MAAM,IAAI2D,UAAUlD,KAAK,IALX,oBAOfqD,GAPe,IAO/B,2BAA0B,CAAC,IAAhB5D,EAAe,QACT6D,GAAL,MAAN7D,EAA0B,IACf,MAANA,EAA0B,IACfA,GAVS,8BAa/B,IAAI8D,EAAUtE,EADdqE,EAAcA,EAAYE,QAQ1B,OANAtD,QAAQC,IAAImD,EAAYE,QACxBxE,EAAKY,KAAK,CACRE,OAAQ,SACRC,IAAI,GAAD,OAAKwD,EAAQhE,MAAM,IAAI2D,UAAUlD,KAAK,KACzCC,QAAS,KAEJsD,EAAQhE,MAAM,IAAI2D,UAAUlD,KAAK,IEzB5ByD,CAAYvE,GAClBsD,EACE,kBAACpC,EAAD,CAAcE,UAAWA,EAAWP,IAAI,wBAI5CwB,EAAO6B,eACG9B,IAARjC,EAAA,qBACkBA,EADlB,QAEI,oCAGV,OACE,yBAAK7B,UAAU,YACb,yBAAKA,UAAU,gBACb,6BACE,2BAAOkG,QAAQ,QAAf,gBACA,4BACEpF,SAAS,IACT8C,MAAOgB,EACP5E,UAAU,mBACVQ,GAAG,OACH2F,KAAK,OACLC,SAAU,SAACC,GACTxB,EAAgBwB,EAAEC,OAAO1C,SAE1B7C,EAAKgC,KAAI,SAACwD,GAAD,OACR,4BAAQrD,IAAKqD,EAAE3C,MAAOA,MAAO2C,EAAE3C,OAC5B2C,EAAEjC,WAIRI,GAEH,6BACE,2BACE5D,SAAS,IACT8C,MAAOlC,EACP8E,KAAK,KACLC,YAAY,aACZzG,UAAU,UACVe,KAAK,OACLP,GAAG,QACH2F,KAAK,QACLO,WAhFU,SAACL,GAEN,MADFA,EAAEM,SAAWN,EAAEO,QAExB3B,EAAOnF,QAAQ+G,SA8ETT,SAAU,SAACC,GAAD,OAAOvB,EAAOuB,EAAEC,OAAO1C,UACnC,4BACE9C,SAAS,IACTd,UAAU,kBACVa,IAAKoE,EACL/E,QAAS,kBAAMmF,EAAYhB,EAAe3C,KACzC2C,IAGJM,GAEH,yBACEnE,GAAG,YACHR,UAAU,iBACVwF,MAAO,CAAEC,QAAS,SAClB,uBAAGjF,GAAG,YAEPuE,EACD,yBAAKS,MAAO,CAAEsB,OAAQ,OAAQxF,MAAO,WAI3C,SAAS4D,EAAUrC,GAAQ,IAAD,EACkBzD,mBAASyD,EAAM9B,KAAK,GAAG6C,OADzC,mBACjBmD,EADiB,KACFC,EADE,KAGxB,OADAlE,EAAYD,EAAM9B,KAAKgG,GAAezC,MAEpC,4BACExD,SAAS,IACTd,UAAU,mBACVQ,GAAG,UACH2F,KAAK,UACLC,SAAU,SAACC,GAAD,OAAOW,EAAiBX,EAAEC,OAAO1C,SAC1Cf,EAAM9B,KAAKgC,KAAI,SAACwD,GAAD,OACd,4BAAQrD,IAAKqD,EAAE3C,MAAOA,MAAO2C,EAAE3C,OAC5B2C,EAAEjC,WAMb,SAASa,EAAKtC,GACZ,OACE,yBAAK7C,UAAU,QACb,0BAAMA,UAAU,iBAAiBwF,MAAO,CAAEyB,OAAQ,IAAlD,gBAGA,kCACM,oCADN,0CAC0D,IACxD,kDAFF,IAE6B,6BAF7B,YAGW,uBAAGzB,MAAO,CAAE0B,WAAY,cAAgBrE,EAAMuC,Q,UC/JzD+B,EAAcC,QACW,cAA7BlG,OAAOmG,SAASC,UAEe,UAA7BpG,OAAOmG,SAASC,UAEhBpG,OAAOmG,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B3F,QAAQC,IACN,iHAKE+E,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBrF,QAAQC,IAAI,sCAGR+E,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL/F,QAAQ+F,MAAM,4CAA6CA,M,ICzF3DC,E,uKAEF,OACE,6BACE,kBAACzJ,EAAD,MACA,kBAACwF,EAAD,W,GALUtF,IAAMwJ,WAWxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxD,SAASC,eAAe,SDAnB,SAAkBmC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,WAAwB9H,OAAOmG,SAASpH,MACpDgJ,SAAW/H,OAAOmG,SAAS4B,OAIvC,OAGF/H,OAAOgI,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMuB,WAAN,sBAEP7B,IAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7B5G,OAAOmG,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL9F,QAAQC,IACN,oEAvFAkH,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCpF,QAAQC,IACN,iHAMJ6E,EAAgBC,EAAOC,OCtB/BE,K","file":"static/js/main.c3961b3c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nexport default function Navbar() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [scroll, setScroll] = React.useState(\"paper\");\r\n\r\n  const handleClickOpen = (scrollType) => () => {\r\n    setOpen(true);\r\n    setScroll(scrollType);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"poppins\">\r\n        <div className=\"logo\">\r\n          <h1>Stacker</h1>\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\" onClick={handleClickOpen(\"paper\")}>\r\n              Help\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        scroll={scroll}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\">\r\n        <DialogTitle id=\"scroll-dialog-title\">Help</DialogTitle>\r\n        <DialogContent dividers={scroll === \"paper\"}>\r\n          <DialogContentText\r\n            component={\"div\"}\r\n            id=\"scroll-dialog-description\"\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}>\r\n            <b>InFix Notation: </b>A mathematical notation in which operators\r\n            are placed between operands.\r\n            <br />\r\n            <b>PreFix Notation: </b>Also known as Polish Notation, is a\r\n            mathematical notation in which operators precede their operands.\r\n            <br />\r\n            <b>PostFix Notation: </b>Also known as Reverse Polish Notation, is a\r\n            mathematical notation in which operators follow their operands.\r\n            <br />\r\n            <br />\r\n            Practically, these are used in calculators, as they increase the\r\n            speed of calculations.\r\n            <br />\r\n            <hr />\r\n            <br />\r\n            <b>Algorithms for conversion</b>\r\n            <br />\r\n            <br />\r\n            <b>InFix to PostFix conversion: </b>\r\n            <br />\r\n            <ol>\r\n              <li>\r\n                Scan each element of the expression (X) from left to right and\r\n                repeat steps 2 to 5 until the stack is empty.\r\n              </li>\r\n              <li>\r\n                If an operand is encountered add it to the resultant string (Y).\r\n              </li>\r\n              <li>\r\n                If a left parenthesis ( \"(\" ) is encountered then push it to the\r\n                stack.\r\n              </li>\r\n              <li>If an operator is encountered then: </li>\r\n              <ol type=\"a\">\r\n                <li>\r\n                  Repeatedly pop from stack and add it to Y which has the same\r\n                  or higher precedence than the next operator.\r\n                </li>\r\n                <li>Push operator to the stack.</li>\r\n              </ol>\r\n              <li>If a right parenthesis is encountered then: </li>\r\n              <ol type=\"a\">\r\n                <li>\r\n                  Repeatedly pop from the stack and to Y until a left\r\n                  parenthesis is encountered.\r\n                </li>\r\n                <li>Pop the left parenthesis.</li>\r\n              </ol>\r\n              <li>END</li>\r\n            </ol>\r\n            <br />\r\n            <br />\r\n            <b>InFix to PreFix conversion: </b>\r\n            <br />\r\n            <ol>\r\n              <li>\r\n                Scan the expression (X) and reverse it, also replace \"(\" to \")\"\r\n                and vice versa.\r\n              </li>\r\n              <li>\r\n                Perform InFix to PostFix conversion on the reversed expression.\r\n              </li>\r\n              <li>\r\n                Finally, reverse the obtained PostFix expression, resulting in\r\n                the PreFix expression.\r\n              </li>\r\n              <li>END</li>\r\n            </ol>\r\n            <br />\r\n            <hr />\r\n            <br />\r\n            <b>Algorithms for evaluations </b>\r\n            <br />\r\n            <br />\r\n            <b>PostFix evaluation: </b>\r\n            <ol>\r\n              <li>\r\n                Scan the expression (X) from left to right and repeat steps 2 to\r\n                4.\r\n              </li>\r\n              <li>\r\n                If an operand is encountered then push the element to stack.\r\n              </li>\r\n              <li>\r\n                If an operator is encountered then pop two operands and evaluate\r\n                based on the operator.\r\n              </li>\r\n              <li>Push the answer to the stack.</li>\r\n              <li>Finally, pop the element which is the answer.</li>\r\n              <li>END</li>\r\n            </ol>\r\n            <br />\r\n            <b>PreFix evaluation: </b>\r\n            <ol>\r\n              <li>Scan the expression (X) and reverse it.</li>\r\n              <li>Perform PostFix evaluation on the expression.</li>\r\n              <li>The resulting value is the answer.</li>\r\n              <li>END</li>\r\n            </ol>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => {\r\n              window.open(\"https://github.com/amaan-mohib/\");\r\n            }}\r\n            color=\"primary\"\r\n            startIcon={\r\n              <img\r\n                src=\"https://github.githubassets.com/favicons/favicon.svg\"\r\n                width=\"20px\"\r\n              />\r\n            }>\r\n            GitHub\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nlet stack = [];\r\nlet data = [];\r\n\r\nexport default function infixPostCon(exp) {\r\n  stack = [];\r\n  let rows = [];\r\n  let i = 0;\r\n  let res = [];\r\n  let spaceExp = exp.split(\" \");\r\n  if (spaceExp.length > 1) exp = spaceExp;\r\n  for (const c of exp) {\r\n    if (!isNaN(c) || isAlpha(c)) res[i++] = c;\r\n    else {\r\n      switch (c) {\r\n        case \"(\":\r\n          stack.push(c);\r\n          break;\r\n        case \"$\":\r\n        case \"^\":\r\n          while (\r\n            stack[stack.length - 1] === \"$\" ||\r\n            stack[stack.length - 1] === \"^\"\r\n          ) {\r\n            res[i++] = stack.pop();\r\n          }\r\n          stack.push(c);\r\n          break;\r\n        case \"/\":\r\n        case \"*\":\r\n          while (\r\n            stack[stack.length - 1] === \"$\" ||\r\n            stack[stack.length - 1] === \"^\" ||\r\n            stack[stack.length - 1] === \"/\" ||\r\n            stack[stack.length - 1] === \"*\"\r\n          ) {\r\n            res[i++] = stack.pop();\r\n          }\r\n          stack.push(c);\r\n          break;\r\n        case \"+\":\r\n        case \"-\":\r\n          while (\r\n            stack[stack.length - 1] === \"$\" ||\r\n            stack[stack.length - 1] === \"^\" ||\r\n            stack[stack.length - 1] === \"/\" ||\r\n            stack[stack.length - 1] === \"*\" ||\r\n            stack[stack.length - 1] === \"+\" ||\r\n            stack[stack.length - 1] === \"-\"\r\n          ) {\r\n            res[i++] = stack.pop();\r\n          }\r\n          stack.push(c);\r\n          break;\r\n        case \")\":\r\n          while (stack[stack.length - 1] !== \"(\") res[i++] = stack.pop();\r\n          stack.pop();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    rows.push({\r\n      symbol: c,\r\n      str: `${res.join(\" \")}`,\r\n      opstack: `${stack.join(\" \")}`,\r\n    });\r\n  }\r\n  while (stack.length !== 0) {\r\n    res[i++] = stack.pop();\r\n  }\r\n  rows.push({\r\n    symbol: \"\",\r\n    str: `${res.join(\" \")}`,\r\n    opstack: \"\",\r\n  });\r\n  data = rows;\r\n  console.log(res);\r\n  return res.join(\" \");\r\n}\r\n\r\nexport function infixPreCon(exp) {\r\n  let revInfix,\r\n    newRevInfix = \"\";\r\n  let spaceExp = exp.split(\" \");\r\n  if (!(spaceExp.length > 1)) {\r\n    revInfix = exp.split(\"\").reverse().join(\"\");\r\n  } else revInfix = spaceExp.reverse().join(\" \");\r\n  for (const c of revInfix) {\r\n    if (c === \"(\") newRevInfix += \")\";\r\n    else if (c === \")\") newRevInfix += \"(\";\r\n    else newRevInfix += c;\r\n  }\r\n  newRevInfix = newRevInfix.trim();\r\n  let postfix = infixPostCon(newRevInfix);\r\n  console.log(newRevInfix.trim());\r\n  data.push({\r\n    symbol: \"Answer\",\r\n    str: `${postfix.split(\"\").reverse().join(\"\")}`,\r\n    opstack: \"\",\r\n  });\r\n  return postfix.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nfunction isAlpha(ch) {\r\n  return /^[A-Z]$/i.test(ch);\r\n}\r\n\r\nexport function ConvertTable(props) {\r\n  return (\r\n    <div id=\"tableDiv\" className=\"tableDiv poppins\">\r\n      <span>{props.operation + \" Conversion Table\"}</span>\r\n      <table className=\"table convert\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Symbol</th>\r\n            <th>{props.str + \" String\"}</th>\r\n            <th>Operation Stack</th>\r\n          </tr>\r\n          {data.map((d, index) => (\r\n            <tr key={index}>\r\n              <td>{`${d.symbol}`}</td>\r\n              <td>{`${d.str}`}</td>\r\n              <td>{`${d.opstack}`}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nlet stack = [];\r\nlet op1, op2, res, data;\r\nexport default function evaluate(exp, operation) {\r\n  let rows = [];\r\n  stack = [];\r\n  let spaceExp = exp.split(\" \");\r\n  if (spaceExp.length > 1) exp = spaceExp;\r\n  for (const c of exp) {\r\n    if (!isNaN(c)) stack.push(parseInt(c, 10));\r\n    else {\r\n      // op2 = stack.pop();\r\n      // op1 = stack.pop();\r\n      if (operation == \"PostFix\") popInPost();\r\n      if (operation == \"PreFix\") popInPre();\r\n      res = compute(op1, op2, c);\r\n      stack.push(res);\r\n    }\r\n    rows.push({\r\n      symbol: c,\r\n      opr1: op1,\r\n      opr2: op2,\r\n      value: res,\r\n      Opstack: `${stack}`,\r\n    });\r\n    op1 = undefined;\r\n    op2 = undefined;\r\n    res = undefined;\r\n  }\r\n  var answer = stack.pop();\r\n  data = rows;\r\n  return answer;\r\n}\r\nfunction popInPost() {\r\n  op2 = stack.pop();\r\n  op1 = stack.pop();\r\n}\r\nfunction popInPre() {\r\n  op1 = stack.pop();\r\n  op2 = stack.pop();\r\n}\r\nfunction compute(operand1, operand2, operator) {\r\n  let op1 = parseFloat(operand1);\r\n  let op2 = parseFloat(operand2);\r\n  switch (operator) {\r\n    case \"+\":\r\n      return op1 + op2;\r\n    case \"-\":\r\n      return op1 - op2;\r\n    case \"*\":\r\n      return op1 * op2;\r\n    case \"/\":\r\n      return op1 / op2;\r\n    case \"$\":\r\n    case \"^\":\r\n      return op1 ** op2;\r\n  }\r\n}\r\n\r\nexport function prefixEval(exp, operation) {\r\n  let spaceExp = exp.split(\" \");\r\n  if (!(spaceExp.length > 1)) {\r\n    let revExp = exp.split(\"\").reverse().join(\"\");\r\n    return evaluate(revExp, operation);\r\n  } else return evaluate(spaceExp.reverse().join(\" \"), operation);\r\n}\r\n\r\nexport function PostFixEvalTable(props) {\r\n  return (\r\n    <div id=\"tableDiv\" className=\"tableDiv poppins\">\r\n      <span>{props.operation + \" Evaluation Table\"}</span>\r\n      <table className=\"table\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Symbol</th>\r\n            <th>Operand 1</th>\r\n            <th>Operand 2</th>\r\n            <th>Value</th>\r\n            <th>Operation Stack</th>\r\n          </tr>\r\n          {data.map((d, index) => (\r\n            <tr key={index}>\r\n              <td>{`${d.symbol}`}</td>\r\n              <td>\r\n                {d.opr1 !== undefined && !isNaN(d.opr1) ? `${d.opr1}` : \"\"}\r\n              </td>\r\n              <td>\r\n                {d.opr2 !== undefined && !isNaN(d.opr2) ? `${d.opr2}` : \"\"}\r\n              </td>\r\n              <td>\r\n                {d.value !== undefined && !isNaN(d.value) ? `${d.value}` : \"\"}\r\n              </td>\r\n              <td>{`${d.Opstack}`}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport infixPostCon, { ConvertTable, infixPreCon } from \"./convert\";\r\nimport evaluate, { PostFixEvalTable, prefixEval } from \"./stack\";\r\n\r\nconst type = [\r\n  { value: 1, label: \"Convert\" },\r\n  { value: 2, label: \"Evaluate\" },\r\n];\r\nconst evaluationTypes = [\r\n  { value: 0, label: \"PostFix\" },\r\n  { value: 1, label: \"PreFix\" },\r\n];\r\nconst convertTypes = [\r\n  { value: 0, label: \"InFix -> PostFix\" },\r\n  { value: 1, label: \"InFix -> PreFix\" },\r\n];\r\n\r\nlet operation, operationType;\r\n\r\nexport default function Type() {\r\n  // let infoDiv;\r\n  // useEffect(() => {\r\n  //   infoDiv = document.getElementById(\"info\");\r\n  // });\r\n\r\n  const [selectedType, setSelectedType] = useState(type[0].value);\r\n  const [exp, setExp] = useState(\"\");\r\n  const [tbody, setTBody] = useState(<div></div>);\r\n  const btnRef = useRef(null);\r\n\r\n  var select2, info;\r\n  if (selectedType == 1) {\r\n    select2 = <CheckType type={convertTypes} />;\r\n    info = <Info text=\"A + B / C * ( D - A ) ^ F ^ H\" />;\r\n    operationType = \"Convert\";\r\n  } else if (selectedType == 2) {\r\n    select2 = <CheckType type={evaluationTypes} />;\r\n    info = <Info text=\"4 55 + 62 23 - *\" />;\r\n    operationType = \"Evaluate\";\r\n  }\r\n\r\n  const handlePress = (e) => {\r\n    var code = e.keyCode || e.which;\r\n    if (code === 13) {\r\n      btnRef.current.click();\r\n    }\r\n  };\r\n\r\n  function handleClick(operationType, exp) {\r\n    const answer = document.getElementById(\"answer\");\r\n    const answerDiv = document.getElementById(\"answerDiv\");\r\n    answerDiv.style.display = \"flex\";\r\n    if (operationType === \"Evaluate\") {\r\n      let res;\r\n      if (operation == \"PostFix\") {\r\n        res = evaluate(exp, operation);\r\n        setTBody(<PostFixEvalTable exp={exp} operation={operation} />);\r\n      }\r\n      if (operation == \"PreFix\") {\r\n        res = prefixEval(exp, operation);\r\n        setTBody(\r\n          <PostFixEvalTable exp={exp} operation={operation + \" (reversed)\"} />\r\n        );\r\n      }\r\n      console.log(res);\r\n      answer.innerHTML =\r\n        res !== undefined && !isNaN(res)\r\n          ? `Answer: <b>${res}</b>`\r\n          : \"Please enter a valid expression.\";\r\n    }\r\n    if (operationType === \"Convert\") {\r\n      let res;\r\n      if (operation == \"InFix -> PostFix\") {\r\n        res = infixPostCon(exp);\r\n        setTBody(<ConvertTable operation={operation} str=\"PostFix\" />);\r\n      }\r\n      if (operation == \"InFix -> PreFix\") {\r\n        res = infixPreCon(exp);\r\n        setTBody(\r\n          <ConvertTable operation={operation} str=\"PreFix (reversed)\" />\r\n        );\r\n      }\r\n      //answer.innerHTML = `Answer: <b>${res}</b>`;\r\n      answer.innerHTML =\r\n        res !== undefined\r\n          ? `Answer: <b>${res}</b>`\r\n          : \"Please enter a valid expression.\";\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"typeHead\">\r\n      <div className=\"type poppins\">\r\n        <div>\r\n          <label htmlFor=\"type\">Select type:</label>\r\n          <select\r\n            tabIndex=\"1\"\r\n            value={selectedType}\r\n            className=\"dropdown poppins\"\r\n            id=\"type\"\r\n            name=\"type\"\r\n            onChange={(e) => {\r\n              setSelectedType(e.target.value);\r\n            }}>\r\n            {type.map((o) => (\r\n              <option key={o.value} value={o.value}>\r\n                {o.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {select2}\r\n        </div>\r\n        <div>\r\n          <input\r\n            tabIndex=\"3\"\r\n            value={exp}\r\n            size=\"25\"\r\n            placeholder=\"Expression\"\r\n            className=\"textBox\"\r\n            type=\"text\"\r\n            id=\"value\"\r\n            name=\"value\"\r\n            onKeyPress={handlePress}\r\n            onChange={(e) => setExp(e.target.value)}></input>\r\n          <button\r\n            tabIndex=\"4\"\r\n            className=\"poppins evalBut\"\r\n            ref={btnRef}\r\n            onClick={() => handleClick(operationType, exp)}>\r\n            {operationType}\r\n          </button>\r\n        </div>\r\n        {info}\r\n      </div>\r\n      <div\r\n        id=\"answerDiv\"\r\n        className=\"answer poppins\"\r\n        style={{ display: \"none\" }}>\r\n        <p id=\"answer\"></p>\r\n      </div>\r\n      {tbody}\r\n      <div style={{ height: \"20px\", width: \"100%\" }}></div>\r\n    </div>\r\n  );\r\n}\r\nfunction CheckType(props) {\r\n  const [selectedValue, setSelectedValue] = useState(props.type[0].value);\r\n  operation = props.type[selectedValue].label;\r\n  return (\r\n    <select\r\n      tabIndex=\"2\"\r\n      className=\"dropdown poppins\"\r\n      id=\"convert\"\r\n      name=\"convert\"\r\n      onChange={(e) => setSelectedValue(e.target.value)}>\r\n      {props.type.map((o) => (\r\n        <option key={o.value} value={o.value}>\r\n          {o.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\nfunction Info(props) {\r\n  return (\r\n    <div className=\"info\">\r\n      <span className=\"material-icons\" style={{ margin: 0 }}>\r\n        info_outline\r\n      </span>\r\n      <p>\r\n        Use <b>space</b> in the whole expression if it contains{\" \"}\r\n        <b>multi-digit numbers</b>.<br />\r\n        Example: <b style={{ fontFamily: \"monospace\" }}>{props.text}</b>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Navbar from \"./navbar\";\nimport Type from \"./type\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Type />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}